<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import PlaygroundSupport
import SwiftUI
import RealityKit
import ARKit

//A - Create Shape enum
enum Shape: String, CaseIterable {
    case cube, sphere
}

//F - Create coordinator for ARView

class ARViewCoordinator: NSObject, ARSessionDelegate {
    var arViewWrapper: ARViewWrapper
    @Binding var selectedShapeIndex: Int
    init(arViewWrapper: ARViewWrapper, selectedShapeIndex: Binding&lt;Int&gt;) {
        self.arViewWrapper = arViewWrapper
        self._selectedShapeIndex = selectedShapeIndex
    }
}

struct ARViewWrapper: UIViewRepresentable{
    
    @Binding var selectedShapeIndex: Int
    
    typealias UIViewType = ARView
    
    func makeCoordinator() -&gt; ARViewCoordinator {
        return ARViewCoordinator(arViewWrapper: self, selectedShapeIndex: $selectedShapeIndex)
    }
    
    func makeUIView(context: UIViewRepresentableContext&lt;ARViewWrapper&gt;) -&gt; ARView {
        let arView = ARView(frame: .zero, cameraMode: .ar, automaticallyConfigureSession: true)
        
        arView.enablePlacement()
        
        arView.session.delegate = context.coordinator 
        
        return arView
    }
    
    func updateUIView(_ uiView: ARView, context: UIViewRepresentableContext&lt;ARViewWrapper&gt;) {
        
    }
    
}

extension ARView {
    func enablePlacement() {
        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(handleTap(recognizer:)))
        self.addGestureRecognizer(tapGestureRecognizer)
    }
    
    func createModel(shape: Shape) -&gt; ModelEntity{
        let mesh = shape == .cube ? MeshResource.generateBox(size: 0.2) : MeshResource.generateSphere(radius: 0.1)
        let material = SimpleMaterial(color: .blue, roughness: 0.5, isMetallic: true)
        return ModelEntity(mesh: mesh, materials: [material])
    }
    
    @objc func handleTap(recognizer: UITapGestureRecognizer){
        guard let coordinator = self.session.delegate as? ARViewCoordinator else {
            print("Error obtaining coordinator")
            return
        }
        let location = recognizer.location(in: self)
        
        let results = self.raycast(from: location, allowing: .estimatedPlane, alignment: .horizontal)
        
        if let firstResult = results.first {
            let selectedShape = Shape.allCases[coordinator.selectedShapeIndex]
            let modelEntity = createModel(shape: selectedShape) //ModelEntity(mesh: mesh, materials: [material])
            let anchorEntity = AnchorEntity(world: firstResult.worldTransform)
            anchorEntity.addChild(modelEntity)
            
            self.scene.addAnchor(anchorEntity)
        }else {
            print("No surface detected - move around device")
        }
    }
}

struct ContentView: View {
    //B - Get all cases
    let objectShapes = Shape.allCases
    
    //C - Create shapeIndex state variable
    @State private var selectedShapeIndex = 0
    
    
    var body: some View {
        ZStack(alignment: .bottomTrailing) {
            ARViewWrapper(selectedShapeIndex: $selectedShapeIndex)
            
            Picker("Shapes", selection: $selectedShapeIndex){
                ForEach(0..&lt;objectShapes.count) { index in
                    Text(self.objectShapes[index].rawValue).tag(index)
                }
            }.pickerStyle(SegmentedPickerStyle())
            .padding (10)
            .background(Color.black.opacity(0.5))
        }
    }
}

PlaygroundPage.current.setLiveView(ContentView())
</string>
			<key>ModifiedRange</key>
			<string>{0, 3461}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
